"use strict"; var emptycontrol; (function (emptycontrol) {
    var defaultSelector = 'input[required-ec],textarea[required-ec]'; emptycontrol.initSettings = { languageCode: "en", selector: defaultSelector, dependentButton: "#finish" }; function settings(modification) { for (var modifKey in modification) { emptycontrol.initSettings[modifKey] = modification[modifKey] } }
    emptycontrol.settings = settings; function fire() {
        buttonDisable(); if (emptycontrol.initSettings.selector === "" || emptycontrol.initSettings.selector === null) emptycontrol.initSettings.selector = defaultSelector; var required_ec = document.querySelectorAll(emptycontrol.initSettings.selector); for (var i = 0; i < required_ec.length; i++) {
            let cssDisplay = "none"; let className = "required-ec-message"; let htmlInText = getLanguageWord(emptycontrol.initSettings.languageCode, className); let insertHtml = "<p class='" + className + "' style='display:" + cssDisplay + "'>" + htmlInText + "</p>"; var appendHtml = !1; var currentRequired = required_ec[i]; if (currentRequired.getAttribute("required-ec") === "warning") {
                var currentMinLength = 0; var currentMinNumber = 0; try { let minLength = parseInt(currentRequired.getAttribute("minlength-ec")); if (!isNaN(minLength)) { className = "required-ec-message-min-length"; htmlInText = getLanguageWord(emptycontrol.initSettings.languageCode, className).replace("{number}", currentRequired.getAttribute("minlength-ec")); insertHtml = "<p class='" + className + "' style='display:" + cssDisplay + "'>" + htmlInText + "</p>"; appendHtml = !0; currentMinLength = minLength } } catch (e) { console.log(e); appendHtml = !1 }
                try {
                    let maxLength = parseInt(currentRequired.getAttribute("maxlength-ec")); if (!isNaN(maxLength)) {
                        if (currentMinLength !== 0) { className = "required-ec-message-min-max-length"; htmlInText = getLanguageWord(emptycontrol.initSettings.languageCode, className).replace("{number}", currentRequired.getAttribute("minlength-ec")).replace("{number2}", currentRequired.getAttribute("maxlength-ec")) }
                        else { className = "required-ec-message-max-length"; htmlInText = getLanguageWord(emptycontrol.initSettings.languageCode, className).replace("{number}", currentRequired.getAttribute("maxlength-ec")) }
                        insertHtml = "<p class='" + className + "' style='display:" + cssDisplay + "'>" + htmlInText + "</p>"; appendHtml = !0
                    }
                } catch (e) { console.log(e); appendHtml = !1 }
                try { let minNumber = parseInt(currentRequired.getAttribute("minnumber-ec")); if (!isNaN(minNumber)) { className = "required-ec-message-min-number"; htmlInText = getLanguageWord(emptycontrol.initSettings.languageCode, className).replace("{number}", currentRequired.getAttribute("minnumber-ec")); insertHtml = "<p class='" + className + "' style='display:" + cssDisplay + "'>" + htmlInText + "</p>"; appendHtml = !0; currentMinNumber = minNumber } } catch (e) { console.log(e); appendHtml = !1 }
                try {
                    let maxNumber = parseInt(currentRequired.getAttribute("maxnumber-ec")); if (!isNaN(maxNumber)) {
                        if (currentMinNumber !== 0) { className = "required-ec-message-min-max-number"; htmlInText = getLanguageWord(emptycontrol.initSettings.languageCode, className).replace("{number}", currentRequired.getAttribute("minnumber-ec")).replace("{number2}", currentRequired.getAttribute("maxnumber-ec")) }
                        else { className = "required-ec-message-max-number"; htmlInText = getLanguageWord(emptycontrol.initSettings.languageCode, className).replace("{number}", currentRequired.getAttribute("maxnumber-ec")) }
                        insertHtml = "<p class='" + className + "' style='display:" + cssDisplay + "'>" + htmlInText + "</p>"; appendHtml = !0
                    }
                } catch (e) { console.log(e); appendHtml = !1 }
            }
            if (appendHtml === !1) { insertHtml = "<p class='" + className + "' style='display:" + cssDisplay + "'>" + htmlInText + "</p>"; appendHtml = !0 }
            if (appendHtml) required_ec[i].insertAdjacentHTML("afterend", insertHtml); currentRequired.onkeyup = function () { detectValues(this); if (this.getAttribute("maxlength-hard-ec") !== null) maxLengthHard(this) }; currentRequired.onchange = function () { detectValues(this) }
        }
    }
    emptycontrol.fire = fire; function reFire() {
        var els = document.querySelectorAll('.required-ec-message'); for (var i = 0; i < els.length; i++) { els[i].remove() }
        fire()
    }
    emptycontrol.reFire = reFire; function detectValues(thisObject) {
        var reason = 0; var next = thisObject.nextElementSibling; if (thisObject.value !== "" && thisObject.value !== null) {
            var currentMinLength = 0; var currentMinNumber = 0; if (thisObject.getAttribute("minlength-ec") !== null) {
                let minLength = parseInt(thisObject.getAttribute("minlength-ec")); currentMinLength = minLength; if (thisObject.getAttribute("maxlength-ec") === null) {
                    try {
                        if (!isNaN(minLength)) {
                            if (thisObject.value.length >= minLength) { next.style.display = "none" }
                            else { next.style.display = ""; reason++ }
                        }
                    } catch (e) { console.log(e) }
                }
            }
            if (thisObject.getAttribute("maxlength-ec") !== null) {
                let maxLength = parseInt(thisObject.getAttribute("maxlength-ec")); try {
                    if (!isNaN(maxLength)) {
                        if (thisObject.value.length >= maxLength) { next.style.display = ""; reason++ }
                        else {
                            if (currentMinLength !== 0) {
                                if (thisObject.value.length < currentMinLength) { next.style.display = ""; reason++ }
                                else { next.style.display = "none" }
                            }
                            else { next.style.display = "none" }
                        }
                    }
                } catch (e) { console.log(e) }
            }
            if (thisObject.getAttribute("minnumber-ec") !== null) {
                let minNumber = parseInt(thisObject.getAttribute("minnumber-ec")); currentMinNumber = minNumber; if (thisObject.getAttribute("maxnumber-ec") === null) {
                    try {
                        if (!isNaN(minNumber)) {
                            if (thisObject.value >= minNumber) { next.style.display = "none" }
                            else { next.style.display = ""; reason++ }
                        }
                    } catch (e) { console.log(e) }
                }
            }
            if (thisObject.getAttribute("maxnumber-ec") !== null) {
                let maxNumber = parseInt(thisObject.getAttribute("maxnumber-ec")); try {
                    if (!isNaN(maxNumber)) {
                        if (thisObject.value > maxNumber) { next.style.display = ""; reason++ }
                        else {
                            if (currentMinNumber !== 0) {
                                if (thisObject.value < currentMinNumber) { next.style.display = ""; reason++ }
                                else { next.style.display = "none" }
                            }
                            else { next.style.display = "none" }
                        }
                    }
                } catch (e) { console.log(e) }
            }
            if (thisObject.getAttribute("minlength-ec") === null && thisObject.getAttribute("maxlength-ec") === null && thisObject.getAttribute("minnumber-ec") === null && thisObject.getAttribute("maxnumber-ec") === null) { if (next !== undefined) { next.style.display = "none" } }
        }
        else {
            if (next !== undefined) {
                if (thisObject.getAttribute("maxlength-ec") !== null) { next.style.display = "none" }
                else { next.style.display = "" }
            }
        }
        if (reason === 0) {
            var required_ec = document.querySelectorAll('[required-ec]'); var finder = Array.from(required_ec).find(el => el.value === ''); if (finder !== undefined) reason++; try {
                var finderMinLength = Array.from(required_ec).find(el => el.getAttribute("minlength-ec") !== null); let minLength = parseInt(finderMinLength.getAttribute("minlength-ec")); if (!isNaN(minLength)) {
                    if (finderMinLength.value.length >= minLength) { }
                    else { reason++ }
                }
            } catch (e) { }
            try {
                var finderMaxLength = Array.from(required_ec).find(el => el.getAttribute("maxlength-ec") !== null); let maxLength = parseInt(finderMaxLength.getAttribute("maxlength-ec")); if (!isNaN(maxLength)) {
                    if (finderMaxLength.value.length >= maxLength) { reason++ }
                    else { }
                }
            } catch (e) { }
            try {
                var finderMinNumber = Array.from(required_ec).find(el => el.getAttribute("minnumber-ec") !== null); let minNumber = parseInt(finderMinNumber.getAttribute("minnumber-ec")); if (!isNaN(minNumber)) {
                    if (finderMinNumber.value < minNumber) { reason++ }
                    else { }
                }
            } catch (e) { }
            try {
                var finderMaxNumber = Array.from(required_ec).find(el => el.getAttribute("maxnumber-ec") !== null); let maxNumber = parseInt(finderMaxNumber.getAttribute("maxnumber-ec")); if (!isNaN(maxNumber)) {
                    if (finderMaxNumber.value > maxNumber) { reason++ }
                    else { }
                }
            } catch (e) { }
            if (reason === 0) { buttonActive() }
            else { buttonDisable() }
        }
        else { buttonDisable() }
    }
    function buttonActive() { var button = document.querySelector(emptycontrol.initSettings.dependentButton); if (button !== null) button.disabled = !1 }
    function buttonDisable() { var button = document.querySelector(emptycontrol.initSettings.dependentButton); if (button !== null) button.disabled = !0 }
    function languageChange(languageCode) {
        emptycontrol.settings.languageCode = languageCode; var required_ec_message = document.querySelectorAll('.required-ec-message,.required-ec-message-min-number,.required-ec-message-max-number,' + '.required-ec-message-min-max-number,.required-ec-message-min-length,.required-ec-message-max-length,.required-ec-message-min-max-length'); for (var i = 0; i < required_ec_message.length; i++) {
            var currentRequired = required_ec_message[i]; var previousElement = required_ec_message[i].previousElementSibling; if (currentRequired.className === "required-ec-message") { required_ec_message[i].innerText = getLanguageWord(languageCode, currentRequired.className) }
            else if (currentRequired.className === "required-ec-message-min-number") { required_ec_message[i].innerText = getLanguageWord(languageCode, currentRequired.className).replace("{number}", previousElement.getAttribute("minnumber-ec")) }
            else if (currentRequired.className === "required-ec-message-max-number") { required_ec_message[i].innerText = getLanguageWord(languageCode, currentRequired.className).replace("{number}", previousElement.getAttribute("maxnumber-ec")) }
            else if (currentRequired.className === "required-ec-message-min-max-number") { required_ec_message[i].innerText = getLanguageWord(languageCode, currentRequired.className).replace("{number}", previousElement.getAttribute("minnumber-ec")).replace("{number2}", previousElement.getAttribute("maxnumber-ec")) }
            else if (currentRequired.className === "required-ec-message-min-length") { required_ec_message[i].innerText = getLanguageWord(languageCode, currentRequired.className).replace("{number}", previousElement.getAttribute("minlength-ec")) }
            else if (currentRequired.className === "required-ec-message-max-length") { required_ec_message[i].innerText = getLanguageWord(languageCode, currentRequired.className).replace("{number}", previousElement.getAttribute("maxlength-ec")) }
            else if (currentRequired.className === "required-ec-message-min-max-length") { required_ec_message[i].innerText = getLanguageWord(languageCode, currentRequired.className).replace("{number}", previousElement.getAttribute("minlength-ec")).replace("{number2}", previousElement.getAttribute("maxlength-ec")) }
        }
        console.log("Language change successfully!")
    }
    emptycontrol.languageChange = languageChange; function getLanguageWord(langCode, className) { var langFinder = emptycontrol.languageWordList.find(a => a.langCode === langCode); return langFinder.words[className] }
    function maxLengthHard(thisObject) { try { var limitNum = thisObject.getAttribute("maxlength-hard-ec"); if (thisObject.value.length > limitNum) { thisObject.value = thisObject.value.substring(0, limitNum) } } catch (e) { console.log(e) } }
    emptycontrol.languageWordList = [{ langCode: "en", words: { "required-ec-message": "Please don't empty.", "required-ec-message-min-number": "Minimum {number}.", "required-ec-message-max-number": "Maximum {number}", "required-ec-message-min-max-number": "Minimum {number}. Maximum {number2}.", "required-ec-message-min-length": "Minimum of {number} characters.", "required-ec-message-max-length": "Maximum of {number} characters.", "required-ec-message-min-max-length": "Minimum {number}, maximum {number2} characters." } }, { langCode: "tr", words: { "required-ec-message": "Lütfen boş bırakmayın.", "required-ec-message-min-number": "Minimum {number}.", "required-ec-message-max-number": "Maksimum {number}", "required-ec-message-min-max-number": "Minimum {number}. Maksimum {number2}.", "required-ec-message-min-length": "Minimum {number} karakter giriniz.", "required-ec-message-max-length": "Maksimum {number} karakter giriniz.", "required-ec-message-min-max-length": "Minimum {number}, maksimum {number2} karakter giriniz." } }, { langCode: "de", words: { "required-ec-message": "Bitte lass es nicht leer.", "required-ec-message-min-number": "Minimum {number}.", "required-ec-message-max-number": "Maximum {number}", "required-ec-message-min-max-number": "Minimum {number}. Maximum {number2}.", "required-ec-message-min-length": "Geben Sie mindestens {number} Zeichen ein.", "required-ec-message-max-length": "Geben Sie bis zu {number} Zeichen ein.", "required-ec-message-min-max-length": "Minimum {number}, maximum {number2} Zeichen ein." } }, { langCode: "ru", words: { "required-ec-message": "Пожалуйста, не оставляйте это пустым", "required-ec-message-min-number": "минимальный {number}", "required-ec-message-max-number": "максимальная {number}", "required-ec-message-min-max-number": "минимальный {number}. максимальная {number2}", "required-ec-message-min-length": "Введите минимум {number} символов", "required-ec-message-max-length": "Введите до {number} символов", "required-ec-message-min-max-length": "Минимум {number}, максимум {number2} символов" } }]
})(emptycontrol || (emptycontrol = {}))